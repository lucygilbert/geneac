{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Geneac is a sitebuilder for people who are interested in sharing their genealogy. Getting Started See the readme in the repository for instructions on how to get going.","title":"Home"},{"location":"#home","text":"Geneac is a sitebuilder for people who are interested in sharing their genealogy.","title":"Home"},{"location":"#getting-started","text":"See the readme in the repository for instructions on how to get going.","title":"Getting Started"},{"location":"deploying/","text":"Deploying Geneac in Production If you just want to run Geneac locally for testing, you should be looking at Developer Quickstart instead! Heroku + AWS Let's be clear: I want to pay as little as possible to host my own Geneac while also offloading as much of the burden of managing infrastructure as I can. This has led me to deploy Geneac to Heroku for the main app servers and AWS for the other stuff. This allows me to run my personal Geneac instances for at most, a few dollars per month. Step 1: Provision Infrastructure In order to deploy to AWS, you need to have a few things: An AWS account (duh) A domain registered with Route 53 and verified to send email in SES (optional, but recommended) The easiest way to get going is to deploy the CloudFormation template located in script/geneac-aws.yml . This will create all the resources you need, in addition to an IAM user. The credentials for that user will be stored in a secret deployed to AWS Secrets Manager, which you can view on the AWS Console. Step 2: Deploy to Heroku If you already have a Heroku account you can click this to get up and running: However, the app.json might not be fully up to date with the environment variables you need. Here is a list of variables that are currently required to deploy Geneac: AWS configuration values: AWS_ACCESS_KEY_ID AWS_REGION AWS_SECRET_ACCESS_KEY S3_BUCKET_NAME - This is just the bucket name, not the full URL to the bucket. You can get this after deploying the resources in Step #1. Values that configure email sending: MAILER_HOSTNAME - This is the hostname that will be used in ActionMailer to generate links back your instance. If you're deploying to Heroku without a custom domain, that would look like my-geneac.herokuapp.com MAILER_SENDER - This is the full email address that your AWS user is able to send mail via SES from, such as no-reply@geneac.net . App configuration values: RACK_ENV , RAILS_ENV - Both of these should probably be production . RAILS_LOG_TO_STDOUT - This should probably be set to enabled if you are on Heroku so you can view all of the logs. RAILS_SERVE_STATIC_FILES - This should be enabled . SECRET_KEY_BASE - You can generate this with rake secret if it is not already generated for you. Docker (unsupported) Previously, I had deployed things with Docker and set up containers with things like MinIO to replace S3. You can find those efforts in docker/ , but I don't support anything there. I'd be happy to review a PR to improve it, though.","title":"Deploying Geneac in Production"},{"location":"deploying/#deploying-geneac-in-production","text":"If you just want to run Geneac locally for testing, you should be looking at Developer Quickstart instead!","title":"Deploying Geneac in Production"},{"location":"deploying/#heroku-aws","text":"Let's be clear: I want to pay as little as possible to host my own Geneac while also offloading as much of the burden of managing infrastructure as I can. This has led me to deploy Geneac to Heroku for the main app servers and AWS for the other stuff. This allows me to run my personal Geneac instances for at most, a few dollars per month.","title":"Heroku + AWS"},{"location":"deploying/#step-1-provision-infrastructure","text":"In order to deploy to AWS, you need to have a few things: An AWS account (duh) A domain registered with Route 53 and verified to send email in SES (optional, but recommended) The easiest way to get going is to deploy the CloudFormation template located in script/geneac-aws.yml . This will create all the resources you need, in addition to an IAM user. The credentials for that user will be stored in a secret deployed to AWS Secrets Manager, which you can view on the AWS Console.","title":"Step 1: Provision Infrastructure"},{"location":"deploying/#step-2-deploy-to-heroku","text":"If you already have a Heroku account you can click this to get up and running: However, the app.json might not be fully up to date with the environment variables you need. Here is a list of variables that are currently required to deploy Geneac: AWS configuration values: AWS_ACCESS_KEY_ID AWS_REGION AWS_SECRET_ACCESS_KEY S3_BUCKET_NAME - This is just the bucket name, not the full URL to the bucket. You can get this after deploying the resources in Step #1. Values that configure email sending: MAILER_HOSTNAME - This is the hostname that will be used in ActionMailer to generate links back your instance. If you're deploying to Heroku without a custom domain, that would look like my-geneac.herokuapp.com MAILER_SENDER - This is the full email address that your AWS user is able to send mail via SES from, such as no-reply@geneac.net . App configuration values: RACK_ENV , RAILS_ENV - Both of these should probably be production . RAILS_LOG_TO_STDOUT - This should probably be set to enabled if you are on Heroku so you can view all of the logs. RAILS_SERVE_STATIC_FILES - This should be enabled . SECRET_KEY_BASE - You can generate this with rake secret if it is not already generated for you.","title":"Step 2: Deploy to Heroku"},{"location":"deploying/#docker-unsupported","text":"Previously, I had deployed things with Docker and set up containers with things like MinIO to replace S3. You can find those efforts in docker/ , but I don't support anything there. I'd be happy to review a PR to improve it, though.","title":"Docker (unsupported)"},{"location":"developer_quickstart/","text":"Developer Quickstart Although you can run all of the components for Geneac natively, by far the easiest way to get up and running to make a change is to leverage Visual Studio Code devcontainers . As long as you have Visual Studio Code and Docker Desktop (or, on Linux, just Docker) installed, you can open the Geneac repository as a container and the setup flow will be triggered. After the container is set up, you can run: # using foreman foreman start -f Procfile.dev # or using overmind, which does fancy tmux stuff overmind start -f Procfile.dev and then visit http://localhost:5000/ and log in with the test credentials that the setup procedure prints. An alternative to having all of this done locally is to use GitHub Codespaces . This is a browser-based way to create a developer environment using the devcontainer setup described above. If you don't like the idea of using a browser, you can also use VS Code natively to connect to your codespace. Keep in mind though, this is not free. Updating the documentation The documentation is generated with mkdocs and mkdocs-material . If you are using the devcontainer, these are installed automatically for you. You can start a development server with: cd docs/ ; mkdocs serve","title":"Developer Quickstart"},{"location":"developer_quickstart/#developer-quickstart","text":"Although you can run all of the components for Geneac natively, by far the easiest way to get up and running to make a change is to leverage Visual Studio Code devcontainers . As long as you have Visual Studio Code and Docker Desktop (or, on Linux, just Docker) installed, you can open the Geneac repository as a container and the setup flow will be triggered. After the container is set up, you can run: # using foreman foreman start -f Procfile.dev # or using overmind, which does fancy tmux stuff overmind start -f Procfile.dev and then visit http://localhost:5000/ and log in with the test credentials that the setup procedure prints. An alternative to having all of this done locally is to use GitHub Codespaces . This is a browser-based way to create a developer environment using the devcontainer setup described above. If you don't like the idea of using a browser, you can also use VS Code natively to connect to your codespace. Keep in mind though, this is not free.","title":"Developer Quickstart"},{"location":"developer_quickstart/#updating-the-documentation","text":"The documentation is generated with mkdocs and mkdocs-material . If you are using the devcontainer, these are installed automatically for you. You can start a development server with: cd docs/ ; mkdocs serve","title":"Updating the documentation"},{"location":"history/","text":"History I started working on a website to store and share my genealogy research while I was an undergraduate student at the University of Minnesota-Duluth . Originally, the project was called 'familiar,' and I used this as the basis for a capstone project in the Honors program. You can see the original paper and poster on the University of Minnesota Library's Digital Conservancy .","title":"History"},{"location":"history/#history","text":"I started working on a website to store and share my genealogy research while I was an undergraduate student at the University of Minnesota-Duluth . Originally, the project was called 'familiar,' and I used this as the basis for a capstone project in the Honors program. You can see the original paper and poster on the University of Minnesota Library's Digital Conservancy .","title":"History"},{"location":"screenshots/","text":"Screenshots The 'person' page shows the details of a particular person, including a timeline of events in their lives and relevant media. The admin interface allows you to manage all the content on the site.","title":"Screenshots"},{"location":"screenshots/#screenshots","text":"The 'person' page shows the details of a particular person, including a timeline of events in their lives and relevant media. The admin interface allows you to manage all the content on the site.","title":"Screenshots"}]}